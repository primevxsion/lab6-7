Cerințe Iterația 1:
• Modificați aplicația: folosiți clasa vector din STL si înlocuiți toate for-urile din
aplicație cu algoritmi din STL si varianta c++11 de for (range for). Exemplu
de algoritmi: copy_if (la filtrare), find_if (căutare), sort
• Folosiți excepții pentru a raporta erori (creați clase proprii pentru excepții).
• Adăugați funcționalitatea noua (descris la fiecare problema).

• Pentru a alege aleator elemente puteți folosi:
#include <random>
std::mt19937 mt{ std::random_device{}() };
std::uniform_int_distribution<> dist(0, v.size()-1);
int rndNr = dist(mt);// numar aleator intre [0,size-1]

#include <algorithm>
#include <random> // std::default_random_engine
#include <chrono> // std::chrono::system_clock
auto seed = std::chrono::system_clock::now().time_since_epoch().count();
std::shuffle(v.begin(),v.end(), std::default_random_engine(seed)); //amesteca vectorul v

Introduceți posibilitatea de a crea un cos de închirieri. Utilizatorul poate crea
interactiv o lista de filme pe care dorește sa le închirieze.
Adăugați următoarele acțiuni (elemente de meniu):
• Golește cos: șterge toate filmele din cos.
• Adaugă in cos: adaugă in cos un film după titlu
• Generează cos: utilizatorul introduce numărul total de filme, coșul se
populează aliator cu filme
• Export. Salvează cos in fișier: CVS sau HTML. Se face salvarea in fișier doar
când s-a selectat acest meniu, coșul nu este persistent (la repornire aplicație
coșul este din nou gol), utilizatorul introduce numele fișierului unde se
salvează la fiecare export.
 După fiecare acțiune utilizator se afișează numărul total al filmelor din cos